version: '3.8'

services:

# This repository contains the Docker Compose setup to quickly deploy the Modern Data Stack.

#List of Services
# 1.  postgres                  - 10.0.0.30
# 3.  dagster                   - 10.0.0.28  
# 4.  dagster-daemon            - 10.0.0.27
# 5.  mongodb                   - 10.0.0.26
# 6.  opentelemetry-collector   - 10.0.0.25
# 7.  nessie                    - 10.0.0.24
# 8.  minio                     - 10.0.0.23
# 9.  minio-setup               - 10.0.0.22
# 10. dremio                    - 10.0.0.21
# 12. spark                     - 10.0.0.19
# 13. prometheus                - 10.0.0.18
# 12. grafana                   - 10.0.0.17


#Postgres is being leveraged for the dagster (dagster and dagster daemon) metadata and also for other testing purposes
# 4 db's are created dagster, fnb, mydb, postgres (this is terces)
  postgres:
    image: postgres:13
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: "dagster"
      POSTGRES_PASSWORD: "dagster"
      POSTGRES_DB: "dagster"
    ports:
      - "5432:5432" 
    volumes:
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dagster"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      terces:
        ipv4_address: 10.0.0.30


#Orchestration Tool
  dagster:
    build: ./dagster
    container_name: dagster
    hostname: dagster
    volumes:
      - .:/app
      - ./postgres/postgres_data:/var/lib/postgresql/data
    ports:
      - "3000:3000"
    environment:
      - DAGSTER_HOME=/app
    command: ["dagit", "-h", "0.0.0.0", "-p", "3000"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      terces:
        ipv4_address: 10.0.0.28



  dagster-daemon:
    build: ./dagster
    container_name: dagster_daemon
    hostname: dagster_daemon
    volumes:
      - .:/app
      - ./postgres/postgres_data:/var/lib/postgresql/data
    environment:
      - DAGSTER_HOME=/app
    command: ["dagster-daemon", "run"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      terces:
        ipv4_address: 10.0.0.27



  #MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    volumes:
      - mongodb_data:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    networks:
      terces:
        ipv4_address: 10.0.0.26

  #opentelemetry-collector
  opentelemetry-collector:
    image: otel/opentelemetry-collector:latest
    ports:
      - "4317:4317"
    container_name: opentelemetry-collector
    hostname: opentelemetry-collector
    networks:
      terces:
        ipv4_address: 10.0.0.25
    command: ["--config", "/etc/otel-collector-config.yml"]
    volumes:
      - ./opentelemetry-collector/data/otel-collector-config.yml:/etc/otel-collector-config.yml

# Nessie Catalog Server Using In-Memory Store
  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    depends_on:
      - opentelemetry-collector
      - postgres
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 19120:19120
    environment:
      NESSIE_VERSION_STORE_TYPE: "JDBC"
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://10.0.0.30:5432/nessie"
      quarkus.datasource.username: "nessie"
      quarkus.datasource.password: "nessie"
      QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: "http://10.0.0.25:4317"
    networks:
      terces:
        ipv4_address: 10.0.0.24

# Minio Storage Server
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=mthammu
      - MINIO_ROOT_PASSWORD=SecretDataStack5623#
      - MINIO_DOMAIN=storage
      - MINIO_REGION_NAME=us-east-1
      - MINIO_REGION=us-east-1
    container_name: minio
    hostname: minio-server
    ports:
      - 7001:9001
      - 7000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data
    networks:
      terces:
        ipv4_address: 10.0.0.23



   # Minio Setup for creating buckets
  minio-setup:
    image: minio/minio:latest
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=mthammu
      - MINIO_ROOT_PASSWORD=SecretDataStack5623#
    volumes:
      - ./minio/sampledata:/tmp/data # Adjust this path to where your data files are stored
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to start...' &&
      /bin/sleep 10 &&
      mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD &&
      mc mb minio/lakehouse &&
      mc mb minio/landing &&
      mc mb minio/sampledata &&
      mc cp --recursive /tmp/data/* minio/sampledata/ &&
      echo 'Buckets created and data loaded.'"
    networks:
      terces:
        ipv4_address: 10.0.0.22



  # Dremio
  dremio:
    image: dremio/dremio-oss:24.2
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
    container_name: dremio  
    hostname: dremio
    environment:
      - DREMIO_JAVA_SERVER_HEAP_MAX=4G
      - DREMIO_JAVA_SERVER_HEAP_MIN=4G
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    volumes:
      - dremio_data:/opt/dremio/data
      - dremio_log:/opt/dremio/log
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9047 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      terces:
        ipv4_address: 10.0.0.21

#spark
  spark:
    build:
      context: .
      dockerfile: Dockerfile.spark
    image: custom_spark_image:latest
    ports: 
      - 8123:8080  # Master Web UI
      - 7077:7077  # Master Port
      - 8234:8888  # Notebook
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=mthammu #minio username
      - AWS_SECRET_ACCESS_KEY=SecretDataStack5623# #minio password
    depends_on:
      - minio
    container_name: spark
    hostname: spark
    volumes:
      - ./spark/spark_data:/data
    networks:
      terces:
        ipv4_address: 10.0.0.19

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      terces:
        ipv4_address: 10.0.0.31

#Superset
  superset:
    build:
      context: .
      dockerfile: Dockerfile.superset
    container_name: superset
    ports:
      - 8080:8088
    environment:
      SUPERSET_SECRET_KEY: "cHnqm6yfvmwZtJLr4rhkkZQoDKP+Rr+ScSPkXWJBbFYmBVpEeod+njXoRjZbu+801tg="
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://superset:superset@postgres:5432/superset"
      #REDIS_URL: "redis://redis:6379/0"
    volumes:
      - ./superset_config.py:/app/pythonpath/superset_config.py
    depends_on:
      postgres:
        condition: service_healthy
      #redis:
        #condition: service_healthy  
    networks:
      terces:
        ipv4_address: 10.0.0.20
    command:
      - /bin/bash
      - -c
      - |
        superset db upgrade && \
        superset fab create-admin --username mthammu --firstname Manoj --lastname Thammu --email mthammu@terces.io --password SecretDataStack5623# && \
        superset init && \
        superset load_examples && \
        superset init && \
        gunicorn --bind 0.0.0.0:8088 "superset.app:create_app()"
        

#grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: '512M'
    networks:
      terces:
        ipv4_address: 10.0.0.17

#node-exporter
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      terces:
        ipv4_address: 10.0.0.16


volumes:
  postgres_data:
  minio_data:
  mongodb_data:
  dremio_data:
  dremio_log:
  spark_data:
    driver: local

networks:
  terces:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16
